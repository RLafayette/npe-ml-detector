(compilationUnit (packageDeclaration package (packageName (packageName (packageName (packageName (packageName com) . google) . common) . util) . concurrent) ;) (importDeclaration (singleStaticImportDeclaration import static (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName (packageOrTypeName com) . google) . common) . base) . Preconditions) . checkNotNull ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName (packageOrTypeName com) . google) . common) . annotations) . GwtIncompatible) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName (packageOrTypeName (packageOrTypeName com) . google) . errorprone) . annotations) . concurrent) . GuardedBy) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . util) . concurrent) . Executor) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . util) . logging) . Level) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . util) . logging) . Logger) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName javax) . annotation) . CheckForNull) ;)) (typeDeclaration (classDeclaration (normalClassDeclaration (classModifier (annotation (markerAnnotation @ (typeName GwtIncompatible)))) (classModifier (annotation (markerAnnotation @ (typeName ElementTypesAreNonnullByDefault)))) (classModifier public) (classModifier final) class ExecutionList (classBody { (classBodyDeclaration (classMemberDeclaration (fieldDeclaration (fieldModifier private) (fieldModifier static) (fieldModifier final) (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Logger)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId log) = (variableInitializer (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (methodInvocation_lfno_primary (typeName Logger) . getLogger ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (typeName ExecutionList) . class) (primaryNoNewArray_lf_primary (methodInvocation_lf_primary . getName ( ))))))))))))))))))))) ))))))))))))))))))))))) ;))) (classBodyDeclaration (classMemberDeclaration (fieldDeclaration (fieldModifier (annotation (singleElementAnnotation @ (typeName GuardedBy) ( (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal STRING)))))))))))))))))) )))) (fieldModifier (annotation (markerAnnotation @ (typeName CheckForNull)))) (fieldModifier private) (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType RunnableExecutorPair)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId runnables))) ;))) (classBodyDeclaration (classMemberDeclaration (fieldDeclaration (fieldModifier (annotation (singleElementAnnotation @ (typeName GuardedBy) ( (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal STRING)))))))))))))))))) )))) (fieldModifier private) (unannType (unannPrimitiveType boolean)) (variableDeclaratorList (variableDeclarator (variableDeclaratorId executed))) ;))) (classBodyDeclaration (constructorDeclaration (constructorModifier public) (constructorDeclarator (simpleTypeName ExecutionList) ( )) (constructorBody { }))) (classBodyDeclaration (classMemberDeclaration (methodDeclaration (methodModifier public) (methodHeader (result void) (methodDeclarator add ( (formalParameterList (formalParameters (formalParameter (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Runnable)))) (variableDeclaratorId runnable))) , (lastFormalParameter (formalParameter (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Executor)))) (variableDeclaratorId executor)))) ))) (methodBody (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (methodInvocation (methodName checkNotNull) ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnable))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal STRING)))))))))))))))))))) ))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (methodInvocation (methodName checkNotNull) ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executor))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal STRING)))))))))))))))))))) ))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (synchronizedStatement synchronized ( (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary this)))))))))))))))))) ) (block { (blockStatements (blockStatement (statement (ifThenStatement if ( (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus ! (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executed))))))))))))))))))) ) (statement (statementWithoutTrailingSubstatement (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName runnables)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (classInstanceCreationExpression_lfno_primary new RunnableExecutorPair ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnable))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executor))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnables)))))))))))))))))) )))))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (returnStatement return ;))))) }))))))) }))))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (methodInvocation (methodName executeListener) ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnable))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executor)))))))))))))))))) ))) ;))))) }))))) (classBodyDeclaration (classMemberDeclaration (methodDeclaration (methodModifier public) (methodHeader (result void) (methodDeclarator execute ( ))) (methodBody (block { (blockStatements (blockStatement (localVariableDeclarationStatement (localVariableDeclaration (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType RunnableExecutorPair)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId list)))) ;)) (blockStatement (statement (statementWithoutTrailingSubstatement (synchronizedStatement synchronized ( (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary this)))))))))))))))))) ) (block { (blockStatements (blockStatement (statement (ifThenStatement if ( (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executed))))))))))))))))) ) (statement (statementWithoutTrailingSubstatement (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (returnStatement return ;))))) })))))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName executed)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal BOOLEAN))))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName list)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnables))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName runnables)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal null))))))))))))))))))))) ;))))) }))))) (blockStatement (localVariableDeclarationStatement (localVariableDeclaration (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType RunnableExecutorPair)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId reversedList) = (variableInitializer (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal null))))))))))))))))))))))) ;)) (blockStatement (statement (whileStatement while ( (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName list))))))))) != (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal null))))))))))))))))))) ) (statement (statementWithoutTrailingSubstatement (block { (blockStatements (blockStatement (localVariableDeclarationStatement (localVariableDeclaration (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType RunnableExecutorPair)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId tmp) = (variableInitializer (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName list))))))))))))))))))))) ;)) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName list)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName (ambiguousName list) . next))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName (ambiguousName tmp) . next)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName reversedList))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName reversedList)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName tmp))))))))))))))))))) ;))))) })))))) (blockStatement (statement (whileStatement while ( (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName reversedList))))))))) != (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal null))))))))))))))))))) ) (statement (statementWithoutTrailingSubstatement (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (methodInvocation (methodName executeListener) ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName (ambiguousName reversedList) . runnable))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName (ambiguousName reversedList) . executor)))))))))))))))))) ))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (expressionName reversedList)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName (ambiguousName reversedList) . next))))))))))))))))))) ;))))) }))))))) }))))) (classBodyDeclaration (classMemberDeclaration (methodDeclaration (methodModifier private) (methodModifier static) (methodHeader (result void) (methodDeclarator executeListener ( (formalParameterList (formalParameters (formalParameter (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Runnable)))) (variableDeclaratorId runnable))) , (lastFormalParameter (formalParameter (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Executor)))) (variableDeclaratorId executor)))) ))) (methodBody (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (tryStatement try (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (methodInvocation (typeName executor) . execute ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnable)))))))))))))))))) ))) ;))))) }) (catches (catchClause catch ( (catchFormalParameter (catchType (unannClassType RuntimeException)) (variableDeclaratorId e)) ) (block { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (methodInvocation (typeName log) . log ( (argumentList (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName (ambiguousName Level) . SEVERE))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (additiveExpression (additiveExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal STRING)))))))) + (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnable)))))) + (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (primary (primaryNoNewArray_lfno_primary (literal STRING)))))))) + (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executor))))))))))))))))) , (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName e)))))))))))))))))) ))) ;))))) })))))))) }))))) (classBodyDeclaration (classMemberDeclaration (classDeclaration (normalClassDeclaration (classModifier private) (classModifier static) (classModifier final) class RunnableExecutorPair (classBody { (classBodyDeclaration (classMemberDeclaration (fieldDeclaration (fieldModifier final) (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Runnable)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId runnable))) ;))) (classBodyDeclaration (classMemberDeclaration (fieldDeclaration (fieldModifier final) (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Executor)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId executor))) ;))) (classBodyDeclaration (classMemberDeclaration (fieldDeclaration (fieldModifier (annotation (markerAnnotation @ (typeName CheckForNull)))) (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType RunnableExecutorPair)))) (variableDeclaratorList (variableDeclarator (variableDeclaratorId next))) ;))) (classBodyDeclaration (constructorDeclaration (constructorDeclarator (simpleTypeName RunnableExecutorPair) ( (formalParameterList (formalParameters (formalParameter (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Runnable)))) (variableDeclaratorId runnable)) , (formalParameter (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType Executor)))) (variableDeclaratorId executor))) , (lastFormalParameter (formalParameter (variableModifier (annotation (markerAnnotation @ (typeName CheckForNull)))) (unannType (unannReferenceType (unannClassOrInterfaceType (unannClassType_lfno_unannClassOrInterfaceType RunnableExecutorPair)))) (variableDeclaratorId next)))) )) (constructorBody { (blockStatements (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (fieldAccess (primary (primaryNoNewArray_lfno_primary this)) . runnable)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName runnable))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (fieldAccess (primary (primaryNoNewArray_lfno_primary this)) . executor)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName executor))))))))))))))))))) ;)))) (blockStatement (statement (statementWithoutTrailingSubstatement (expressionStatement (statementExpression (assignment (leftHandSide (fieldAccess (primary (primaryNoNewArray_lfno_primary this)) . next)) (assignmentOperator =) (expression (assignmentExpression (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName next))))))))))))))))))) ;))))) }))) }))))) })))) <EOF>)