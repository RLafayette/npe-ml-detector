(compilationUnit (packageDeclaration package (packageName (packageName (packageName (packageName com) . google) . common) . math) ;) (importDeclaration (singleStaticImportDeclaration import static (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . ElementType) . FIELD ;)) (importDeclaration (singleStaticImportDeclaration import static (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . ElementType) . METHOD ;)) (importDeclaration (singleStaticImportDeclaration import static (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . ElementType) . PARAMETER ;)) (importDeclaration (singleStaticImportDeclaration import static (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . ElementType) . TYPE ;)) (importDeclaration (singleStaticImportDeclaration import static (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . RetentionPolicy) . RUNTIME ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName (packageOrTypeName com) . google) . common) . annotations) . GwtCompatible) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . Retention) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName java) . lang) . annotation) . Target) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName javax) . annotation) . Nonnull) ;)) (importDeclaration (singleTypeImportDeclaration import (typeName (packageOrTypeName (packageOrTypeName (packageOrTypeName javax) . annotation) . meta) . TypeQualifierDefault) ;)) (typeDeclaration (interfaceDeclaration (annotationTypeDeclaration (interfaceModifier (annotation (markerAnnotation @ (typeName GwtCompatible)))) (interfaceModifier (annotation (singleElementAnnotation @ (typeName Retention) ( (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName RUNTIME)))))))))))))))) )))) (interfaceModifier (annotation (singleElementAnnotation @ (typeName Target) ( (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName TYPE)))))))))))))))) )))) (interfaceModifier (annotation (singleElementAnnotation @ (typeName TypeQualifierDefault) ( (elementValue (elementValueArrayInitializer { (elementValueList (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName FIELD)))))))))))))))) , (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName METHOD)))))))))))))))) , (elementValue (conditionalExpression (conditionalOrExpression (conditionalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (unaryExpression (unaryExpressionNotPlusMinus (postfixExpression (expressionName PARAMETER))))))))))))))))) })) )))) (interfaceModifier (annotation (markerAnnotation @ (typeName Nonnull)))) @ interface ElementTypesAreNonnullByDefault (annotationTypeBody { })))) <EOF>)